[
    {
        "id": "8d2c696e.9d7c68",
        "type": "tab",
        "label": "Vehicle Simulator",
        "disabled": false,
        "info": ""
    },
    {
        "id": "232b67b1479186f8",
        "type": "group",
        "z": "8d2c696e.9d7c68",
        "name": "",
        "style": {
            "fill": "#ffffff",
            "label": true
        },
        "nodes": [
            "aa157b7f.769088",
            "d43c1bcd.2c2848",
            "e2ba5939.4352f8",
            "94ac13cd.fda8e",
            "94f1d2b5.082e4",
            "799d44e0.a7041c",
            "a3ff1017.c96a1",
            "e89e4466.105cc8",
            "7c0bce6f.59735",
            "ef0d1ae6.2c3ca8",
            "178bc115.c5465f",
            "c6805b0e833d8f0e",
            "434443c916f71644",
            "fa5adf187582c7f4",
            "74f1df98677266f7",
            "95b9836eb403e4fa",
            "f8b23997eccced05",
            "14920472f0b80be2",
            "34cdb664625f76e4",
            "0ba8d0cea11a830f",
            "318ddcf00b595b0b",
            "305fee0f0453eb85",
            "33b33d29eb873409",
            "3b3fd8d3c810b201",
            "1c98795ee14062fd",
            "7a84f03b82e3e32b",
            "a91121d1.c21a7",
            "84c567fa59101ad5"
        ],
        "x": 608,
        "y": 79,
        "w": 1304,
        "h": 822
    },
    {
        "id": "3b3fd8d3c810b201",
        "type": "group",
        "z": "8d2c696e.9d7c68",
        "g": "232b67b1479186f8",
        "name": "",
        "style": {
            "fill": "#e3f3d3",
            "label": true
        },
        "nodes": [
            "d3dbb99e191c2e56",
            "87b593f834bf0186"
        ],
        "x": 934,
        "y": 599,
        "w": 372,
        "h": 122
    },
    {
        "id": "1c98795ee14062fd",
        "type": "group",
        "z": "8d2c696e.9d7c68",
        "g": "232b67b1479186f8",
        "name": "",
        "style": {
            "fill": "#ffffbf",
            "fill-opacity": "0.76",
            "label": true
        },
        "nodes": [
            "98a94bf2.2b3838",
            "ebfdc7f66e06a078"
        ],
        "x": 634,
        "y": 159,
        "w": 272,
        "h": 122
    },
    {
        "id": "7a84f03b82e3e32b",
        "type": "group",
        "z": "8d2c696e.9d7c68",
        "g": "232b67b1479186f8",
        "name": "Extensions to Simulator Flow",
        "style": {
            "stroke": "#a4a4a4",
            "label": true,
            "color": "#777777",
            "fill": "#bfdbef",
            "label-position": "n"
        },
        "nodes": [
            "3b4f19d215548376",
            "34efa824f7a2cf1b",
            "c568a6c298ce0add",
            "0f53e759680c88ee"
        ],
        "x": 1634,
        "y": 239,
        "w": 252,
        "h": 302
    },
    {
        "id": "98a94bf2.2b3838",
        "type": "inject",
        "z": "8d2c696e.9d7c68",
        "g": "1c98795ee14062fd",
        "name": "Regular Event ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 760,
        "y": 240,
        "wires": [
            [
                "aa157b7f.769088"
            ]
        ]
    },
    {
        "id": "aa157b7f.769088",
        "type": "function",
        "z": "8d2c696e.9d7c68",
        "g": "232b67b1479186f8",
        "name": "Emit event if vehicle enabled",
        "func": "//If counting is enabled then emit a message, otherwise do nothing\nvar countState = flow.get(\"countState\")||0;\nif (countState) { // if 'countState' is true then emit this counter event\n  faultCount = flow.get(\"faultCount\")|| 0;\n  faultCount++;\n  flow.set(\"faultCount\", faultCount);\n  return msg;\n} \n  \nelse            // otherwise emit nothing\n  ;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 320,
        "wires": [
            [
                "e2ba5939.4352f8"
            ]
        ]
    },
    {
        "id": "d43c1bcd.2c2848",
        "type": "function",
        "z": "8d2c696e.9d7c68",
        "g": "232b67b1479186f8",
        "name": "Save vehicle enabled/disabled state",
        "func": "flow.set(\"countState\", msg.payload) // set 'countState' true or false\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 850,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "e2ba5939.4352f8",
        "type": "function",
        "z": "8d2c696e.9d7c68",
        "g": "232b67b1479186f8",
        "name": "Emit route and delivery data",
        "func": "theRoute = flow.get(\"currentVehicleRoute\") ||0;\nif (theRoute === 0) // no route stored\nreturn;\n\nconst UTC_time = Date.now();\n\ncount = flow.get(\"vehicleRouteCounter\")||0;\nif (count >= (theRoute.coordinates.length) ) // if we have already reached the end of the route then just exit\n  return;\n\n\n// Check if time to send a simulated fault message\nfaultTargetCount = flow.get(\"faultTargetCount\");\nfaultCount = flow.get(\"faultCount\");\nif (faultCount >= faultTargetCount) {\n    faultToBeSent = true;\n    flow.set(\"faultCount\", 0);\n    flow.set(\"faultTargetCount\", getRndInteger(22,32));\n}\nelse\n    faultToBeSent = false;\n\nvar faultMessage ={};\nif (faultToBeSent){\n  faultMessage = {\"payload\": {\"msgType\": \"fault\", \"vehicleFault\":selectFault(), \"vehicle_id\":\"VEH-876\", \"vehicle_location\": theRoute.coordinates[count],  \"date_time_UTC_milliseconds\": UTC_time}};\n}\n  else\n  faultMessage = null;\n\n\n\n\nif (count === 0) { // send estimated arrival time\n    d = Date.now();\n    ukAddOneHour = 60*60*1000; // UK time has to be adjusted by plus-one-hour\n    vehicleMoveInterval = 10; // moves every 10 seconds\n    estimatedArrivalDateUTC = d + ukAddOneHour + (vehicleMoveInterval * 1000* (theRoute.coordinates.length -1)); // add ms 10 * 1000ms (10 seconds) per set of coordinates\n    node.send([null,null,null, {\"payload\":{\"msgType\": \"arrival_estimate\",\"delivery_id\":theRoute.delivery_id, \"estimated_arrival_time\":estimatedArrivalDateUTC }}])\n}\n\nif (count < (theRoute.coordinates.length) -1 ){\n  flow.set(\"vehicleRouteCounter\", count+1); // Increment the counter and store in Global Context\n   return [ { \"payload\": {\"msgType\": \"vehicle\",\"vehicle_id\":\"VEH-876\", \"vehicle_location\": theRoute.coordinates[count], \"delivery_id\":theRoute.delivery_id}} , null, faultMessage, null ];\n}\nelse {\n    d = Date.now();  \n    ukAddOneHour = 60*60*1000;\n    UTCDateNow = d + ukAddOneHour ; //  \n    flow.set(\"vehicleRouteCounter\", count+1); // Increment the counter and store in Global Context\n     return[{ \"payload\": {\"msgType\": \"vehicle\",\"vehicle_id\":\"VEH-876\", \"vehicle_location\": theRoute.coordinates[count], \"delivery_id\":theRoute.delivery_id}}, {\"payload\":{\"msgType\": \"delivered\", \"package_delivered_id\":theRoute.delivery_id, \"delivery_time\":UTCDateNow}}, faultMessage,null];\n}\n\n/*-------------------------------------------------------------*/\nfunction getRndInteger(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) ) + min;\n}\n\nfunction selectFault() {\n    faults = [\"engine_overheating\", \"coolant_level_low\", \"tyre_pressure_low\", \"battery_charging_fault\", \"A/C fault\", \"ABS brake fault\", \"steering fault\" ];\n    return faults[getRndInteger(0, 6)];\n}\n\n",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 420,
        "wires": [
            [
                "95b9836eb403e4fa"
            ],
            [
                "94ac13cd.fda8e",
                "74f1df98677266f7",
                "34cdb664625f76e4"
            ],
            [
                "434443c916f71644",
                "0ba8d0cea11a830f"
            ],
            [
                "34cdb664625f76e4",
                "14920472f0b80be2"
            ]
        ]
    },
    {
        "id": "94ac13cd.fda8e",
        "type": "function",
        "z": "8d2c696e.9d7c68",
        "g": "232b67b1479186f8",
        "name": "Disable vehicle",
        "func": "\nreturn {\"payload\": false};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 780,
        "y": 500,
        "wires": [
            [
                "d43c1bcd.2c2848"
            ]
        ]
    },
    {
        "id": "94f1d2b5.082e4",
        "type": "function",
        "z": "8d2c696e.9d7c68",
        "g": "232b67b1479186f8",
        "name": "Setup Routes Context Vars",
        "func": "//var msgOut = {}; \nvar theRoute = [\n    {\n        \"route_number\": 1,\n        \"coordinates\": [\n            [\n                55.8808, // latitude\t\n                -4.32739 // longitude\n            ],\n            [\n                55.88008,\n                -4.32754\n            ],\n            [\n                55.87932,\n                -4.3277\n            ],\n            [\n                55.87855,\n                -4.3279\n            ],\n            [\n                55.87837,\n                -4.32794\n            ],\n            [\n                55.8782,\n                -4.32798\n            ],\n            [\n                55.878,\n                -4.32803\n            ]\n        ],\n        \"delivery_id\": 123\n    },\n    {\n        \"route_number\": 2,\n        \"coordinates\": [\n            [\n                55.87782,\n                -4.32808\n            ],\n            [\n                55.87765,\n                -4.32813\n            ],\n            [\n                55.87747,\n                -4.32817\n            ],\n            [\n                55.87712,\n                -4.32826\n            ],\n            [\n                55.87696,\n                -4.3283\n            ],\n            [\n                55.87694,\n                -4.3283\n            ],\n            [\n                55.87687,\n                -4.32833\n            ]\n        ],\n        \"delivery_id\": 456\n    },\n    {\n        \"route_number\": 3,\n        \"coordinates\": [\n            [\n                55.8768,\n                -4.3283\n            ],\n            [\n                55.87669,\n                -4.32832\n            ],\n            [\n                55.87651,\n                -4.32836\n            ],\n            [\n                55.87651,\n                -4.32836\n            ],\n            [\n                55.87652,\n                -4.32846\n            ],\n            [\n                55.87654,\n                -4.32856\n            ]\n        ],\n        \"delivery_id\": 789\n    },\n    {\n        \"route_number\": 4,\n        \"coordinates\": [\n            [\n                55.87656,\n                -4.3287\n            ],\n            [\n                55.87658,\n                -4.32879\n            ],\n            [\n                55.8766,\n                -4.32891\n            ],\n            [\n                55.87664,\n                -4.32902\n            ],\n            [\n                55.87667,\n                -4.32914\n            ],\n            [\n                55.87671,\n                -4.32926\n            ],\n            [\n                55.87675,\n                -4.32936\n            ]\n        ],\n        \"delivery_id\": 910\n    },\n    {\n        \"route_number\": 5,\n        \"coordinates\": [\n            [\n                55.8768,\n                -4.32947\n            ],\n            [\n                55.87683,\n                -4.32954\n            ],\n            [\n                55.87688,\n                -4.32963\n            ],\n            [\n                55.87692,\n                -4.32969\n            ],\n            [\n                55.87696,\n                -4.32976\n            ],\n            [\n                55.87696,\n                -4.32976\n            ],\n            [\n                55.87716,\n                -4.32968\n            ],\n            [\n                55.87724,\n                -4.32965\n            ],\n            [\n                55.87739,\n                -4.32959\n            ],\n            [\n                55.87757,\n                -4.32952\n            ],\n            [\n                55.87774,\n                -4.32944\n            ],\n            [\n                55.87787,\n                -4.32937\n            ]\n        ],\n        \"delivery_id\": 102\n    }\n]\n\n//theRoute.forEach(item => {msgOut.payload = item; node.send(msgOut)}); // emit each route, one by one\nflow.set(\"allRoutes\", theRoute);\nflow.set(\"routeIndex\", 0);\nflow.get(\"faultCount\",0);\nflow.set(\"faultTargetCount\", getRndInteger(22,32));\n\nreturn; // once all messages have been emitted we return\n\n\n/*-------------------------------------------------------------*/\nfunction getRndInteger(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) ) + min;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1740,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "799d44e0.a7041c",
        "type": "inject",
        "z": "8d2c696e.9d7c68",
        "g": "232b67b1479186f8",
        "name": "Startup code - auto run",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1430,
        "y": 840,
        "wires": [
            [
                "94f1d2b5.082e4"
            ]
        ]
    },
    {
        "id": "a3ff1017.c96a1",
        "type": "function",
        "z": "8d2c696e.9d7c68",
        "g": "232b67b1479186f8",
        "name": "Select Next Route",
        "func": "var msgOut = {};\nvar routeIndex = flow.get(\"routeIndex\")||0;\ntheRoutes = flow.get(\"allRoutes\");\nnextRoute = theRoutes[routeIndex];\nrouteIndex++;\nif (routeIndex==5)\n   routeIndex = 0;\nflow.set(\"routeIndex\", routeIndex);\nflow.set(\"currentVehicleRoute\", nextRoute);\nflow.set(\"vehicleRouteCounter\",0);\nflow.set(\"countState\", true)\nmsgOut = {\"route\": nextRoute};\nreturn msgOut; ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 760,
        "wires": [
            [
                "7c0bce6f.59735"
            ]
        ]
    },
    {
        "id": "e89e4466.105cc8",
        "type": "inject",
        "z": "8d2c696e.9d7c68",
        "g": "232b67b1479186f8",
        "name": "CLICK TO RUN SIMULATOR",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 800,
        "y": 760,
        "wires": [
            [
                "c6805b0e833d8f0e"
            ]
        ]
    },
    {
        "id": "7c0bce6f.59735",
        "type": "debug",
        "z": "8d2c696e.9d7c68",
        "g": "232b67b1479186f8",
        "name": "Route content",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1580,
        "y": 760,
        "wires": []
    },
    {
        "id": "ef0d1ae6.2c3ca8",
        "type": "complete",
        "z": "8d2c696e.9d7c68",
        "g": "232b67b1479186f8",
        "name": "",
        "scope": [
            "d43c1bcd.2c2848"
        ],
        "uncaught": false,
        "x": 750,
        "y": 620,
        "wires": [
            [
                "178bc115.c5465f"
            ]
        ]
    },
    {
        "id": "178bc115.c5465f",
        "type": "delay",
        "z": "8d2c696e.9d7c68",
        "g": "232b67b1479186f8",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 740,
        "y": 680,
        "wires": [
            [
                "d3dbb99e191c2e56"
            ]
        ]
    },
    {
        "id": "d3dbb99e191c2e56",
        "type": "function",
        "z": "8d2c696e.9d7c68",
        "g": "3b3fd8d3c810b201",
        "name": "Run until 'routes' limit",
        "func": "// The simulator will halt after delivering 'numberOfRoutesUntilDisable' number of routes\n// Set this value to suit your own requirements:\nconst numberOfRoutesUntilDisable = 5;\n\nvar disableCounter = flow.get(\"simulatorDisableCounter\")||0;\n    disableCounter++;\nif (disableCounter < numberOfRoutesUntilDisable) {\n\n    flow.set(\"simulatorDisableCounter\", disableCounter);\n    return msg;\n}\nelse\n  ;  // no return - we have timed-out - need to start simulation again",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 680,
        "wires": [
            [
                "a3ff1017.c96a1"
            ]
        ]
    },
    {
        "id": "c6805b0e833d8f0e",
        "type": "function",
        "z": "8d2c696e.9d7c68",
        "g": "232b67b1479186f8",
        "name": "Reset to allow new run",
        "func": "flow.set(\"simulatorDisableCounter\", 0);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 760,
        "wires": [
            [
                "a3ff1017.c96a1"
            ]
        ]
    },
    {
        "id": "434443c916f71644",
        "type": "debug",
        "z": "8d2c696e.9d7c68",
        "g": "232b67b1479186f8",
        "name": "Fault",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 500,
        "wires": []
    },
    {
        "id": "fa5adf187582c7f4",
        "type": "debug",
        "z": "8d2c696e.9d7c68",
        "g": "232b67b1479186f8",
        "name": "Vehicle",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1400,
        "y": 340,
        "wires": []
    },
    {
        "id": "74f1df98677266f7",
        "type": "debug",
        "z": "8d2c696e.9d7c68",
        "g": "232b67b1479186f8",
        "name": "Delivered",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 220,
        "wires": []
    },
    {
        "id": "95b9836eb403e4fa",
        "type": "function",
        "z": "8d2c696e.9d7c68",
        "g": "232b67b1479186f8",
        "name": "Add Temperature Value",
        "func": "//Temperature Simulation \n\n// Two stored 'Context' values used to persist data between runs of the function\n// Initialise the Context values if they doesn't exist already\n// If they already exist then the stored context values will be fetched\n// See: https://nodered.org/docs/user-guide/writing-functions#:~:text=an%20error%22%2C%20msg)%3B-,Storing%20data,-Aside%20from%20the\n// See: https://nodered.org/docs/user-guide/context\nconst UTC_time = Date.now();\nconst highSensorValue = 3;\nconst lowSensorValue = -1;\nconst sendTemperatureValueCounterMax = 2;\nvar sensorValue = context.get('sensorValue')||lowSensorValue;\nvar sendTemperatureValueCounter = context.get('sendTemperatureValueCounter')||sendTemperatureValueCounterMax;\nvar increment = context.get('increment')||1;\n\n\nif (sensorValue >= highSensorValue ) {\n    increment = -0.2;\n    }\n  else if (sensorValue <= lowSensorValue ) { \n  increment = 0.2;\n  }\nsensorValue = sensorValue + increment + (getRandomInt(-1, 1) /2);\nsensorValue = Math.round(sensorValue * 100) / 100; // round to 2 decimal places\nmsg.payload.temperature = sensorValue;\n\nvar refrigeration_status = {};\nsendTemperatureValueCounter--;\nif (sendTemperatureValueCounter <=0) {\n    sendTemperatureValueCounter = sendTemperatureValueCounterMax;\n    refrigeration_status = {\"payload\": {msgType: \"refrigeration_status\", \"vehicle_id\" : msg.payload.vehicle_id, \"temperature\": sensorValue,  \"date_time_UTC_milliseconds\": UTC_time}};\n}\nelse\n refrigeration_status = null;\n \n// save the values for next invocation of the function \ncontext.set('sendTemperatureValueCounter',sendTemperatureValueCounter );\ncontext.set('sensorValue',sensorValue);\ncontext.set('increment',increment)\n\n\nreturn [msg,refrigeration_status] ;\n\n/**\n * Returns a random integer between min (inclusive) and max (inclusive).\n * The value is no lower than min (or the next integer greater than min\n * if min isn't an integer) and no greater than max (or the next integer\n * lower than max if max isn't an integer).\n * Using Math.round() will give you a non-uniform distribution!\n */\nfunction getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 400,
        "wires": [
            [
                "fa5adf187582c7f4",
                "34cdb664625f76e4"
            ],
            [
                "f8b23997eccced05",
                "0ba8d0cea11a830f"
            ]
        ]
    },
    {
        "id": "f8b23997eccced05",
        "type": "debug",
        "z": "8d2c696e.9d7c68",
        "g": "232b67b1479186f8",
        "name": "Refrigeration status",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1430,
        "y": 440,
        "wires": []
    },
    {
        "id": "14920472f0b80be2",
        "type": "debug",
        "z": "8d2c696e.9d7c68",
        "g": "232b67b1479186f8",
        "name": "Arrival_estimate",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 260,
        "wires": []
    },
    {
        "id": "34cdb664625f76e4",
        "type": "function",
        "z": "8d2c696e.9d7c68",
        "g": "232b67b1479186f8",
        "name": "'Telemetry' Messages",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 280,
        "wires": [
            [
                "3b4f19d215548376",
                "c568a6c298ce0add"
            ]
        ]
    },
    {
        "id": "0ba8d0cea11a830f",
        "type": "function",
        "z": "8d2c696e.9d7c68",
        "g": "232b67b1479186f8",
        "name": "'State' Messages",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 520,
        "wires": [
            [
                "34efa824f7a2cf1b",
                "0f53e759680c88ee"
            ]
        ]
    },
    {
        "id": "3b4f19d215548376",
        "type": "debug",
        "z": "8d2c696e.9d7c68",
        "g": "7a84f03b82e3e32b",
        "name": "Telemetry",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1740,
        "y": 360,
        "wires": []
    },
    {
        "id": "34efa824f7a2cf1b",
        "type": "debug",
        "z": "8d2c696e.9d7c68",
        "g": "7a84f03b82e3e32b",
        "name": "State",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1730,
        "y": 500,
        "wires": []
    },
    {
        "id": "87b593f834bf0186",
        "type": "comment",
        "z": "8d2c696e.9d7c68",
        "g": "3b3fd8d3c810b201",
        "name": "Set number of routes here (before halting)",
        "info": "",
        "x": 1120,
        "y": 640,
        "wires": []
    },
    {
        "id": "ebfdc7f66e06a078",
        "type": "comment",
        "z": "8d2c696e.9d7c68",
        "g": "1c98795ee14062fd",
        "name": "Message Rate Set Here",
        "info": "",
        "x": 780,
        "y": 200,
        "wires": []
    },
    {
        "id": "318ddcf00b595b0b",
        "type": "comment",
        "z": "8d2c696e.9d7c68",
        "g": "232b67b1479186f8",
        "name": "Ali Zahoor | S2036197",
        "info": "",
        "x": 1280,
        "y": 160,
        "wires": []
    },
    {
        "id": "c568a6c298ce0add",
        "type": "google-cloud-iotcore device",
        "z": "8d2c696e.9d7c68",
        "g": "7a84f03b82e3e32b",
        "name": "Telemetry Messages",
        "qos": "0",
        "retain": "",
        "topic": "events",
        "broker": "15ea5cd08222db87",
        "x": 1760,
        "y": 280,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "0f53e759680c88ee",
        "type": "google-cloud-iotcore device",
        "z": "8d2c696e.9d7c68",
        "g": "7a84f03b82e3e32b",
        "name": "State Messages",
        "qos": "0",
        "retain": "",
        "topic": "state",
        "broker": "15ea5cd08222db87",
        "x": 1740,
        "y": 420,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "305fee0f0453eb85",
        "type": "google-cloud-iotcore device",
        "z": "8d2c696e.9d7c68",
        "g": "232b67b1479186f8",
        "name": "Receive Command",
        "qos": "0",
        "retain": "",
        "topic": "events",
        "broker": "15ea5cd08222db87",
        "x": 790,
        "y": 820,
        "wires": [
            [
                "c6805b0e833d8f0e",
                "84c567fa59101ad5"
            ],
            []
        ]
    },
    {
        "id": "33b33d29eb873409",
        "type": "comment",
        "z": "8d2c696e.9d7c68",
        "g": "232b67b1479186f8",
        "name": "Receive commands from IoT Core",
        "info": "",
        "x": 1080,
        "y": 820,
        "wires": []
    },
    {
        "id": "a91121d1.c21a7",
        "type": "comment",
        "z": "8d2c696e.9d7c68",
        "g": "232b67b1479186f8",
        "name": "Vehicle Simulator CW2 2021-22 | April 2022",
        "info": "",
        "x": 1270,
        "y": 120,
        "wires": []
    },
    {
        "id": "84c567fa59101ad5",
        "type": "debug",
        "z": "8d2c696e.9d7c68",
        "g": "232b67b1479186f8",
        "name": "Receive Command",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 860,
        "wires": []
    },
    {
        "id": "15ea5cd08222db87",
        "type": "google-cloud-iotcore broker",
        "name": "GoogleIoT",
        "commandsQos": "1",
        "configQos": "1",
        "brokerHost": "mqtt.googleapis.com",
        "brokerPort": "8883",
        "projectId": "iot-2022-342313",
        "region": "europe-west1",
        "registryId": "delivery_vehicles",
        "deviceId": "vehicle_1",
        "algorithm": "ES256",
        "privateKeyFile": "/Users/alizahoor/Desktop/ec_private.pem",
        "keepAlive": "60",
        "reconnectPeriod": "5000",
        "connectTimeout": "30000",
        "clean": "true"
    }
]